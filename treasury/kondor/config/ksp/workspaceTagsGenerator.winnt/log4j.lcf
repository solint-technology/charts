# Global logging properties.
# ------------------------------------------
# The set of handlers to be loaded upon startup.
# Comma-separated list of class names.
# (? LogManager docs say no comma here, but JDK example has comma.)
handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler
#handlers=java.util.logging.FileHandler
#handlers=java.util.logging.ConsoleHandler

# Default global logging level.
# Loggers and Handlers may override this level
.level=ALL


# Handlers
# -----------------------------------------

# --- ConsoleHandler ---
# Override of global logging level
java.util.logging.ConsoleHandler.level=INFO
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.SimpleFormatter.format=[%1$td %1$tb %1$tY][%1$tl:%1$tM:%1$tS %1$Tp] %4$s: %5$s %n

# --- FileHandler ---
# Override of global logging level
java.util.logging.FileHandler.level=FINE

# Style of output (Simple or XML):
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter


# Naming style for the output file:
# (The output file is placed in the directory
# defined by the "user.home" System property.)
#java.util.logging.FileHandler.pattern=%h/java%u.log
#java.util.logging.FileHandler.pattern=migration%g.log
java.util.logging.FileHandler.pattern=C:/Program Files/Reuters/Kplus30/entities/Standalone/log/ksp//workspaceTagsGenerator.log

# Limiting size of output file in bytes:
#java.util.logging.FileHandler.limit=5000000

# Number of output files to cycle through, by appending an
# integer to the base file name:
#java.util.logging.FileHandler.count=10
